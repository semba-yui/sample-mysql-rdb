name: Build and Deploy MkDocs per Branch

on:
  workflow_dispatch:

  push:
    branches:
      - main
      - 'release'
      - 'release/**'
      - 'develop'
      - 'develop/**'
      - 'feature'
      - 'feature/**'

concurrency:
  # 同じブランチに複数の push があれば、古いワークフローをキャンセルする
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Safe Branch Name
        id: set-safe-name
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          SAFE_BRANCH_NAME="${BRANCH_NAME//\//-}"
          echo "safe_branch_name=$SAFE_BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Install Mise
        uses: jdx/mise-action@v2

      - name: Poetryの依存関係キャッシュ
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Python Dependencies with Poetry
        run: poetry install --no-interaction --no-ansi

      - name: Install npm Dependencies
        run: npm install

      - name: Text Lint
        run: npm run docs:lint

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start Docker services
        run: npm run db:serve

      - name: Wait for services to be ready
        run: |
          echo "データベースとマイグレーションの完了を待機中..."
          max_attempts=30
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if [ "$(docker inspect -f '{{.State.Status}}' tbls_container 2>/dev/null)" = "exited" ] && \
               [ "$(docker inspect -f '{{.State.ExitCode}}' tbls_container 2>/dev/null)" = "0" ]; then
              echo "tbls document generation completed successfully"
              break
            fi
            echo "Waiting for tbls to complete... (Attempt $attempt/$max_attempts)"
            sleep 10
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "tbls did not complete in time"
            docker logs tbls_container
            exit 1
          fi

      - name: Build ER
        run: npm run er:build

      - name: Build Documents
        run: npm run docs:build

      - name: Upload built site
        uses: actions/upload-artifact@v4
        with:
          name: mkdocs-site-${{ steps.set-safe-name.outputs.safe_branch_name }}
          path: site

      - name: Upload Excel artifact
        uses: actions/upload-artifact@v4
        with:
          name: excel-${{ steps.set-safe-name.outputs.safe_branch_name }}
          path: excel/schema.xlsx
          retention-days: 5 

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:

      - name: Set Safe Branch Name
        id: set-safe-name
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          SAFE_BRANCH_NAME="${BRANCH_NAME//\//-}"
          echo "safe_branch_name=$SAFE_BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Download built site artifact
        uses: actions/download-artifact@v4
        with:
          name: mkdocs-site-${{ steps.set-safe-name.outputs.safe_branch_name }}
          path: site

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: Prepare branch directory
        run: |
          mkdir -p "gh-pages/${{ steps.set-safe-name.outputs.safe_branch_name }}"
          cp -r site/* "gh-pages/${{ steps.set-safe-name.outputs.safe_branch_name }}/"
          
      - name: Clean up deleted branches
        run: |
          # GitHub APIを使用してブランチリストを取得
          BRANCHES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                     "https://api.github.com/repos/${{ github.repository }}/branches" | \
                     jq -r '.[].name')
          
          # アクティブなブランチ名を取得（スラッシュをハイフンに変換）
          active_branches=()
          for branch in $BRANCHES; do
            if [[ -n "$branch" && "$branch" != "gh-pages" ]]; then
              # スラッシュをハイフンに変換
              safe_branch="${branch//\//-}"
              active_branches+=("$safe_branch")
            fi
          done
          
          # 現在のブランチを追加（念のため）
          CURRENT_BRANCH="${{ steps.set-safe-name.outputs.safe_branch_name }}"
          if [[ ! " ${active_branches[@]} " =~ " ${CURRENT_BRANCH} " ]]; then
            active_branches+=("$CURRENT_BRANCH")
          fi
          
          echo "アクティブブランチ一覧："
          printf '%s\n' "${active_branches[@]}"
          
          # gh-pagesブランチのディレクトリを確認し、古いブランチのディレクトリを削除
          cd gh-pages
          for dir in */; do
            if [[ -d "$dir" ]]; then
              dir_name=${dir%/}
              
              # 特殊ディレクトリはスキップ
              if [[ "$dir_name" == "assets" || "$dir_name" == ".git" || "$dir_name" == "site" ]]; then
                continue
              fi
              
              # そのディレクトリが現在のアクティブブランチに対応するか確認
              is_active=false
              for branch in "${active_branches[@]}"; do
                if [[ "$dir_name" == "$branch" ]]; then
                  is_active=true
                  break
                fi
              done
              
              # アクティブでないブランチディレクトリは削除
              if [[ "$is_active" == false ]]; then
                echo "削除: $dir_name (対応するアクティブブランチがありません)"
                rm -rf "$dir_name"
              fi
            fi
          done
          cd ..
      
      - name: Generate index.html
        run: |
          # Generate index.html only using direct branch directories, not content subdirectories
          cat <<EOF > gh-pages/index.html
          <!DOCTYPE html>
          <html lang="ja">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>ドキュメント インデックス</title>
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
            <link rel="preconnect" href="https://fonts.googleapis.com">
            <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
            <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&display=swap" rel="stylesheet">
            <style>
              :root {
                --primary: #1976D2;
                --primary-light: #64B5F6;
                --primary-dark: #0D47A1;
                --accent: #FFD54F;
                --text: #212121;
                --text-light: #757575;
                --background: #F9F9F9;
                --card: #FFFFFF;
                --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                --shadow-hover: 0 10px 15px rgba(182, 0, 129, 0.2);
                --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
              }

              * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
              }

              body {
                font-family: 'Noto Sans JP', sans-serif;
                background-color: var(--background);
                color: var(--text);
                line-height: 1.6;
                padding: 0;
                margin: 0;
                font-weight: 400;
              }

              .container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 2rem;
              }

              header {
                background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
                color: white;
                padding: 2rem 0;
                box-shadow: var(--shadow);
                margin-bottom: 2.5rem;
              }

              header .container {
                display: flex;
                flex-direction: column;
                align-items: center;
                text-align: center;
              }

              h1 {
                font-size: 2.5rem;
                margin-bottom: 1rem;
                color: white;
                font-weight: 700;
              }

              .subtitle {
                font-size: 1.2rem;
                color: rgba(255, 255, 255, 0.9);
                margin-bottom: 1.5rem;
                font-weight: 300;
              }

              .search-container {
                width: 100%;
                max-width: 600px;
                margin: 1rem 0;
                position: relative;
              }

              .search-container input {
                width: 100%;
                padding: 1rem 1.5rem;
                border: none;
                border-radius: 50px;
                background-color: rgba(255, 255, 255, 0.15);
                backdrop-filter: blur(10px);
                color: white;
                font-size: 1rem;
                transition: var(--transition);
                outline: none;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                font-family: 'Noto Sans JP', sans-serif;
              }

              .search-container input::placeholder {
                color: rgba(255, 255, 255, 0.7);
              }

              .search-container input:focus {
                background-color: rgba(255, 255, 255, 0.25);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
              }

              .search-icon {
                position: absolute;
                right: 1.5rem;
                top: 50%;
                transform: translateY(-50%);
                color: rgba(255, 255, 255, 0.7);
              }

              .branches-grid {
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
                gap: 1.5rem;
                list-style-type: none;
                padding: 0;
              }

              .branch-item {
                background-color: var(--card);
                border-radius: 12px;
                overflow: hidden;
                box-shadow: var(--shadow);
                transition: var(--transition);
                position: relative;
              }

              .branch-item:hover {
                transform: translateY(-5px);
                box-shadow: var(--shadow-hover);
              }

              .branch-item a {
                display: block;
                text-decoration: none;
                color: var(--text);
                padding: 1.5rem;
                border-top: 5px solid #E0E0E0;
                height: 100%;
              }

              .branch-item a::after {
                content: "\\f061";
                font-family: "Font Awesome 6 Free";
                font-weight: 900;
                position: absolute;
                right: 1.5rem;
                bottom: 1.5rem;
                color: var(--primary);
                opacity: 0;
                transition: var(--transition);
              }

              .branch-item:hover a::after {
                opacity: 1;
                transform: translateX(5px);
              }

              .branch-name {
                font-size: 1.2rem;
                font-weight: 500;
                margin-bottom: 0.5rem;
                display: flex;
                align-items: center;
              }

              .branch-name i {
                margin-right: 10px;
                color: var(--primary);
              }

              .branch-type {
                font-size: 0.85rem;
                color: var(--text-light);
                background-color: #F5F5F5;
                border-radius: 50px;
                padding: 0.25rem 0.75rem;
                display: inline-block;
                margin-top: 0.5rem;
                font-weight: 300;
              }

              .main a {
                border-color: var(--primary);
              }

              .develop a {
                border-color: #4CAF50;
              }

              .release a {
                border-color: #FF9800;
              }

              .feature a {
                border-color: #9C27B0;
              }

              .footer {
                text-align: center;
                color: var(--text-light);
                margin-top: 3rem;
                padding: 1.5rem 0;
                border-top: 1px solid #EEEEEE;
                font-size: 0.9rem;
              }

              .footer a {
                color: var(--primary);
                text-decoration: none;
              }

              @media (max-width: 768px) {
                .container {
                  padding: 1rem;
                }
                
                h1 {
                  font-size: 2rem;
                }
                
                .branches-grid {
                  grid-template-columns: 1fr;
                }
              }
            </style>
          </head>
          <body>
            <header>
              <div class="container">
                <h1>ブランチ別ドキュメント</h1>
                <p class="subtitle">技術資料・開発ガイド</p>
                <div class="search-container">
                  <input type="text" id="searchInput" placeholder="ブランチを検索..." />
                  <span class="search-icon"><i class="fas fa-search"></i></span>
                </div>
              </div>
            </header>
            
            <div class="container">
              <ul class="branches-grid" id="branchList">
          EOF
          
          # 環境変数からブランチ名を取得
          CURRENT_BRANCH="${{ github.ref_name }}"
          SAFE_CURRENT_BRANCH="${{ steps.set-safe-name.outputs.safe_branch_name }}"
          
          # GitHubリポジトリの実際のブランチ情報を使用して利用可能なブランチを判定
          cd gh-pages
          
          # gh-pagesディレクトリ内で、直接のサブディレクトリを確認（実際のブランチディレクトリのみを含める）
          for dir in */; do
            # ディレクトリ名からスラッシュを削除
            bname=${dir%/}
            
            # 特殊ディレクトリと .git は除外
            if [[ "$bname" == "assets" || "$bname" == "site" || "$bname" == ".git" ]]; then
              continue
            fi
            
            # 実際のブランチを確認 - MkDocsの「site」ディレクトリの存在またはindex.htmlの存在を確認
            # これにより内部フォルダを誤って表示するのを防ぐ
            if [ -d "$bname" ] && ([ -f "$bname/index.html" ] || [ -d "$bname/assets" ]); then
              # ブランチタイプに基づいてCSSクラスとアイコンを適用
              class="branch-item"
              icon="code-branch"
              type="ブランチ"
              
              # 表示名用の変数
              display_name="$bname"
              
              # 現在のブランチには特別なマーカーを追加
              if [ "$bname" = "$SAFE_CURRENT_BRANCH" ]; then
                display_name="$bname (最新)"
              fi
              
              if [ "$bname" = "main" ]; then
                class="branch-item main"
                icon="star"
                type="メインブランチ"
              elif [[ "$bname" == develop* ]]; then
                class="branch-item develop"
                icon="code"
                type="開発ブランチ"
              elif [[ "$bname" == release* ]]; then
                class="branch-item release"
                icon="tag"
                type="リリースブランチ"
              elif [[ "$bname" == feature* ]]; then
                class="branch-item feature"
                icon="puzzle-piece"
                type="機能ブランチ"
              fi
              
              echo "            <li class=\"$class\" data-name=\"$display_name\">
                <a href=\"./$bname/\">
                  <div class=\"branch-name\"><i class=\"fas fa-$icon\"></i> $display_name</div>
                  <span class=\"branch-type\">$type</span>
                </a>
              </li>" >> ../gh-pages/index.html
            fi
          done
          cd ..
          
          cat <<EOF >> gh-pages/index.html
              </ul>
              
              <div class="footer">
                <p>最終更新: $(date -u "+%Y-%m-%d %H:%M:%S UTC") | <a href="https://github.com/${{ github.repository }}/actions" target="_blank"><i class="fas fa-sync-alt"></i> ビルドステータス</a></p>
              </div>
            </div>
            
            <script>
              // 検索機能
              document.getElementById('searchInput').addEventListener('keyup', function() {
                const searchValue = this.value.toLowerCase();
                const branches = document.querySelectorAll('#branchList li');
                
                branches.forEach(branch => {
                  const name = branch.getAttribute('data-name').toLowerCase();
                  if (name.includes(searchValue)) {
                    branch.style.display = '';
                  } else {
                    branch.style.display = 'none';
                  }
                });
              });
              
              // アニメーション効果
              document.addEventListener('DOMContentLoaded', function() {
                const items = document.querySelectorAll('.branch-item');
                items.forEach((item, index) => {
                  item.style.opacity = '0';
                  item.style.transform = 'translateY(20px)';
                  item.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                  
                  setTimeout(() => {
                    item.style.opacity = '1';
                    item.style.transform = 'translateY(0)';
                  }, 100 + (index * 50));
                });
              });
            </script>
          </body>
          </html>
          EOF

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: gh-pages
          force_orphan: false
          keep_files: true
          commit_message: "Update documentation for branch ${{ github.ref_name }} (as ${{ steps.set-safe-name.outputs.safe_branch_name }})"
